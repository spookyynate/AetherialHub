-- Check if Drawing API is available
local function API_Check()
    if Drawing == nil then
        return "No"
    else
        return "Yes"
    end
end

local Find_Required = API_Check()

if Find_Required == "No" then
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Aetherial Hub";
        Text = "Script could not load because of your executor.";
        Duration = math.huge;
        Button1 = "OK"
    })
    return
end

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Camera = game:GetService("Workspace").CurrentCamera
local UserInputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")

local Typing = false
local TracersEnabled = true  -- Variable to manage the toggle state

-- Define default settings
local defaultSettings = {
    TracersVisible = true,
    TracerColor = Color3.fromRGB(255, 80, 10),
    TracerThickness = 1,
    TracerTransparency = 0.7,
    ModeSkipKey = Enum.KeyCode.E,
    DisableKey = Enum.KeyCode.Q,
}

_G.SendNotifications = true
_G.DefaultSettings = false
_G.TeamCheck = false
_G.FromMouse = false
_G.FromCenter = false
_G.FromBottom = true
_G.TracersVisible = defaultSettings.TracersVisible
_G.TracerColor = defaultSettings.TracerColor
_G.TracerThickness = defaultSettings.TracerThickness
_G.TracerTransparency = defaultSettings.TracerTransparency
_G.ModeSkipKey = defaultSettings.ModeSkipKey
_G.DisableKey = defaultSettings.DisableKey

-- Create the GUI
local screenGui = Instance.new("ScreenGui")
local frame = Instance.new("Frame")
local modeSkipKeyLabel = Instance.new("TextLabel")
local modeSkipKeyInput = Instance.new("TextBox")
local disableKeyLabel = Instance.new("TextLabel")
local disableKeyInput = Instance.new("TextBox")
local applyButton = Instance.new("TextButton")

screenGui.Name = "AetherialHubGUI"
screenGui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")

frame.Size = UDim2.new(0, 300, 0, 200)
frame.Position = UDim2.new(0.5, -150, 0.5, -100)
frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
frame.Parent = screenGui

modeSkipKeyLabel.Size = UDim2.new(0, 150, 0, 50)
modeSkipKeyLabel.Position = UDim2.new(0.1, 0, 0.2, 0)
modeSkipKeyLabel.Text = "Mode Skip Key:"
modeSkipKeyLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
modeSkipKeyLabel.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
modeSkipKeyLabel.Parent = frame

modeSkipKeyInput.Size = UDim2.new(0, 100, 0, 50)
modeSkipKeyInput.Position = UDim2.new(0.5, -50, 0.2, 0)
modeSkipKeyInput.Text = _G.ModeSkipKey.Name
modeSkipKeyInput.TextColor3 = Color3.fromRGB(255, 255, 255)
modeSkipKeyInput.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
modeSkipKeyInput.Parent = frame

disableKeyLabel.Size = UDim2.new(0, 150, 0, 50)
disableKeyLabel.Position = UDim2.new(0.1, 0, 0.7, 0)
disableKeyLabel.Text = "Disable Key:"
disableKeyLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
disableKeyLabel.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
disableKeyLabel.Parent = frame

disableKeyInput.Size = UDim2.new(0, 100, 0, 50)
disableKeyInput.Position = UDim2.new(0.5, -50, 0.7, 0)
disableKeyInput.Text = _G.DisableKey.Name
disableKeyInput.TextColor3 = Color3.fromRGB(255, 255, 255)
disableKeyInput.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
disableKeyInput.Parent = frame

applyButton.Size = UDim2.new(0, 100, 0, 50)
applyButton.Position = UDim2.new(0.5, -50, 0.9, 0)
applyButton.Text = "Apply"
applyButton.BackgroundColor3 = Color3.fromRGB(50, 150, 50)
applyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
applyButton.Parent = frame

-- Function to convert key name to Enum.KeyCode
local function getKeyCodeFromName(keyName)
    for _, keyCode in pairs(Enum.KeyCode:GetEnumItems()) do
        if keyCode.Name == keyName then
            return keyCode
        end
    end
    return nil
end

-- Function to apply the new key settings
local function applyKeySettings()
    local modeKey = getKeyCodeFromName(modeSkipKeyInput.Text)
    local disableKey = getKeyCodeFromName(disableKeyInput.Text)
    
    if modeKey then
        _G.ModeSkipKey = modeKey
    else
        StarterGui:SetCore("SendNotification", {
            Title = "Aetherial Hub",
            Text = "Invalid Mode Skip Key. Please enter a valid key.",
            Duration = 5,
        })
    end
    
    if disableKey then
        _G.DisableKey = disableKey
    else
        StarterGui:SetCore("SendNotification", {
            Title = "Aetherial Hub",
            Text = "Invalid Disable Key. Please enter a valid key.",
            Duration = 5,
        })
    end
    
    StarterGui:SetCore("SendNotification", {
        Title = "Aetherial Hub",
        Text = "Key bindings updated. Mode Skip Key: " .. _G.ModeSkipKey.Name .. ", Disable Key: " .. _G.DisableKey.Name,
        Duration = 5,
    })
end

-- Connect input events
applyButton.MouseButton1Click:Connect(applyKeySettings)

-- Update GUI with default key values
modeSkipKeyInput.Text = _G.ModeSkipKey.Name
disableKeyInput.Text = _G.DisableKey.Name

-- Key input handler
local function onKeyInput(input)
    local keyName = Enum.KeyCode[input.KeyCode.Name]
    if keyName then
        return keyName
    end
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed then
        if input.KeyCode == _G.DisableKey and not Typing then
            _G.TracersVisible = not _G.TracersVisible
            
            if _G.SendNotifications then
                StarterGui:SetCore("SendNotification", {
                    Title = "Aetherial Hub";
                    Text = "The tracers' visibility is now set to " .. tostring(_G.TracersVisible) .. ".";
                    Duration = 5;
                })
            end
        end
    end
end)

local function CreateTracers()
    -- ... (existing tracer code)
end

UserInputService.TextBoxFocused:Connect(function()
    Typing = true
end)

UserInputService.TextBoxFocusReleased:Connect(function()
    Typing = false
end)

local Success, Errored = pcall(function()
    CreateTracers()
end)

if Success and not Errored then
    if _G.SendNotifications then
        StarterGui:SetCore("SendNotification", {
            Title = "Aetherial Hub";
            Text = "Tracer script has successfully loaded.";
            Duration = 5;
        })
    end
elseif Errored and not Success then
    if _G.SendNotifications then
        StarterGui:SetCore("SendNotification", {
            Title = "Aetherial Hub";
            Text = "Tracer script has errored while loading, please check the developer console! (F9)";
            Duration = 5;
        })
    end
    warn(Errored)
end
