-- Function to check if Drawing API is available
local function API_Check()
    local success, result = pcall(function()
        return Drawing ~= nil
    end)
    return success and result
end

-- Check if Drawing API is available
local isDrawingAvailable = API_Check()

if not isDrawingAvailable then
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Aetherial Hub",
        Text = "Script could not load because Drawing API is not available.",
        Duration = math.huge,
        Button1 = "OK"
    })
    return
end

-- Initialize services
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Camera = game:GetService("Workspace").CurrentCamera
local UserInputService = game:GetService("UserInputService")

-- Initialize configuration variables
local TracersEnabled = true
local Typing = false

_G.SendNotifications = true
_G.DefaultSettings = false
_G.TeamCheck = false
_G.FromMouse = false
_G.FromCenter = false
_G.FromBottom = true
_G.TracersVisible = true
_G.TracerColor = Color3.fromRGB(255, 80, 10)
_G.TracerThickness = 1
_G.TracerTransparency = 0.7
_G.ModeSkipKey = Enum.KeyCode.E
_G.DisableKey = Enum.KeyCode.Q
_G.OuterGlowColor = Color3.fromRGB(255, 0, 0)
_G.FillColor = Color3.fromRGB(255, 150, 150)

-- Function to create ESP
local function CreateESP()
    local function updateTracer(TracerLine, character)
        if character and character:FindFirstChild("HumanoidRootPart") then
            local HumanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            local Vector, OnScreen = Camera:WorldToViewportPoint(HumanoidRootPart.Position)
            
            TracerLine.Thickness = _G.TracerThickness
            TracerLine.Transparency = _G.TracerTransparency
            TracerLine.Color = _G.TracerColor

            if _G.FromMouse then
                TracerLine.From = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
            elseif _G.FromCenter then
                TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
            elseif _G.FromBottom then
                TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
            end

            if OnScreen and TracersEnabled then
                TracerLine.To = Vector2.new(Vector.X, Vector.Y)
                TracerLine.Visible = _G.TracersVisible
            else
                TracerLine.Visible = false
            end
        else
            TracerLine.Visible = false
        end
    end

    local function handlePlayer(player)
        if player.Name ~= game.Players.LocalPlayer.Name then
            local TracerLine = Drawing.new("Line")
            local OuterGlow = Drawing.new("Square")
            local BodyFill = Drawing.new("Square")

            RunService.RenderStepped:Connect(function()
                local character = workspace:FindFirstChild(player.Name)
                updateTracer(TracerLine, character)

                -- Handle Outer Glow and Body Fill
                if character and character:FindFirstChild("HumanoidRootPart") then
                    local HumanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                    local Head = character:FindFirstChild("Head")
                    local HRP_Vector, HRP_OnScreen = Camera:WorldToViewportPoint(HumanoidRootPart.Position)
                    local Head_Vector, Head_OnScreen = Camera:WorldToViewportPoint(Head.Position)
                    
                    if HRP_OnScreen and Head_OnScreen then
                        OuterGlow.Visible = true
                        OuterGlow.Color = _G.OuterGlowColor
                        OuterGlow.Thickness = 3
                        OuterGlow.Transparency = 0.7
                        OuterGlow.Size = Vector2.new(30, 60)
                        OuterGlow.Position = Vector2.new(HRP_Vector.X - OuterGlow.Size.X / 2, HRP_Vector.Y - OuterGlow.Size.Y / 2)
                        
                        BodyFill.Visible = true
                        BodyFill.Color = _G.FillColor
                        BodyFill.Transparency = 0.5
                        BodyFill.Size = Vector2.new(28, 58)
                        BodyFill.Position = Vector2.new(HRP_Vector.X - BodyFill.Size.X / 2, HRP_Vector.Y - BodyFill.Size.Y / 2)
                    else
                        OuterGlow.Visible = false
                        BodyFill.Visible = false
                    end
                else
                    OuterGlow.Visible = false
                    BodyFill.Visible = false
                end
            end)

            Players.PlayerRemoving:Connect(function()
                TracerLine.Visible = false
                OuterGlow.Visible = false
                BodyFill.Visible = false
            end)
        end
    end

    for _, player in pairs(Players:GetPlayers()) do
        handlePlayer(player)
    end

    Players.PlayerAdded:Connect(function(player)
        player.CharacterAdded:Connect(function(character)
            handlePlayer(player)
        end)
    end)
end

-- Key Bindings
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end

    if input.KeyCode == Enum.KeyCode.G then
        TracersEnabled = not TracersEnabled
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Aetherial Hub",
            Text = "ESP " .. (TracersEnabled and "Enabled" or "Disabled"),
            Duration = 2,
        })
    end
end)

-- Chat Command Handler
Players.LocalPlayer.Chatted:Connect(function(message)
    local args = string.split(message, " ")
    local command = args[1]:lower()

    if command == "/keybind" and #args == 2 then
        local keyName = args[2]:upper()
        local newKeybind = Enum.KeyCode[keyName]

        if newKeybind and newKeybind ~= _G.DisableKey and newKeybind ~= _G.ModeSkipKey then
            _G.DisableKey = newKeybind
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Aetherial Hub",
                Text = "Disable Keybind changed to " .. tostring(newKeybind),
                Duration = 5,
            })
        else
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Aetherial Hub",
                Text = "Invalid or already set keybind.",
                Duration = 5,
            })
        end
    elseif command == "/color" and #args == 2 then
        local colorArgs = string.split(args[2], ",")
        if #colorArgs == 3 then
            local r, g, b = tonumber(colorArgs[1]), tonumber(colorArgs[2]), tonumber(colorArgs[3])
            
            if r and g and b and r >= 0 and r <= 255 and g >= 0 and g <= 255 and b >= 0 and b <= 255 then
                _G.TracerColor = Color3.fromRGB(r, g, b)
                game:GetService("StarterGui"):SetCore("SendNotification", {
                    Title = "Aetherial Hub",
                    Text = "Tracer color changed to (" .. r .. ", " .. g .. ", " .. b .. ")",
                    Duration = 5,
                })
            else
                game:GetService("StarterGui"):SetCore("SendNotification", {
                    Title = "Aetherial Hub",
                    Text = "Invalid color values. Please use format R,G,B with values between 0 and 255.",
                    Duration = 5,
                })
            end
        else
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Aetherial Hub",
                Text = "Invalid color format. Please use format R,G,B.",
                Duration = 5,
            })
        end
    end
end)

-- Call CreateESP to start
CreateESP()
