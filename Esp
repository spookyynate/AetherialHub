-- Check if Drawing API is available
local function API_Check()
    if Drawing == nil then
        return "No"
    else
        return "Yes"
    end
end

local Find_Required = API_Check()

if Find_Required == "No" then
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Aetherial Hub";
        Text = "script could not load because of your executor.";
        Duration = math.huge;
        Button1 = "OK"
    })
    return
end

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")

local Typing = false
local TracersEnabled = true  -- Variable to manage the toggle state

_G.SendNotifications = true   -- If set to true then the script would notify you frequently on any changes applied and when loaded / errored. (If a game can detect this, it is recommended to set it to false)
_G.DefaultSettings = false   -- If set to true then the tracer script would run with default settings regardless of any changes you made.

_G.TeamCheck = false   -- If set to true then the script would create tracers only for the enemy team members.

--[!]-- ONLY ONE OF THESE VALUES SHOULD BE SET TO TRUE TO NOT ERROR THE SCRIPT --[!]--

_G.FromMouse = false   -- If set to true, the tracers will come from the position of your mouse cursor on your screen.
_G.FromCenter = false   -- If set to true, the tracers will come from the center of your screen.
_G.FromBottom = true   -- If set to true, the tracers will come from the bottom of your screen.

_G.TracersVisible = true   -- If set to true then the tracers will be visible and vice versa.
_G.TracerColor = Color3.fromRGB(255, 80, 10)   -- The color that the tracers would appear as.
_G.TracerThickness = 1   -- The thickness of the tracers.
_G.TracerTransparency = 0.7   -- The transparency of the tracers.

_G.ModeSkipKey = Enum.KeyCode.E   -- The key that changes between modes that indicate where will the tracers come from.
_G.DisableKey = Enum.KeyCode.Q   -- The key that disables / enables the tracers.

local ESPs = {}

local function CreateESP(character)
    local BillboardGui = Instance.new("BillboardGui", character)
    BillboardGui.Name = "ESP"
    BillboardGui.Adornee = character:WaitForChild("HumanoidRootPart")
    BillboardGui.Size = UDim2.new(4, 0, 5, 0)
    BillboardGui.StudsOffset = Vector3.new(0, 2, 0)
    BillboardGui.AlwaysOnTop = true

    local Frame = Instance.new("Frame", BillboardGui)
    Frame.Size = UDim2.new(1, 0, 1, 0)
    Frame.BackgroundTransparency = 0.5
    Frame.BackgroundColor3 = Color3.fromRGB(255, 150, 150)
    Frame.BorderSizePixel = 0

    local UIStroke = Instance.new("UIStroke", Frame)
    UIStroke.Thickness = 2
    UIStroke.Color = Color3.fromRGB(255, 0, 0)
    UIStroke.Transparency = 0.7
end

local function UpdateKeybinds(newDisableKey)
    _G.DisableKey = newDisableKey
end

local function ProcessChatCommand(message)
    if message:sub(1, 8) == "/keybind" then
        local newKey = message:sub(10)
        local keyEnum = Enum.KeyCode[newKey]
        if keyEnum then
            UpdateKeybinds(keyEnum)
            StarterGui:SetCore("SendNotification", {
                Title = "Aetherial Hub";
                Text = "Keybind updated to " .. newKey .. ".";
                Duration = 5;
            })
        else
            StarterGui:SetCore("SendNotification", {
                Title = "Aetherial Hub";
                Text = "Invalid key: " .. newKey .. ".";
                Duration = 5;
            })
        end
    end
end

Players.PlayerChatted:Connect(function(player, message)
    if player == Players.LocalPlayer then
        ProcessChatCommand(message)
    end
end)

UserInputService.TextBoxFocused:Connect(function()
    Typing = true
end)

UserInputService.TextBoxFocusReleased:Connect(function()
    Typing = false
end)

UserInputService.InputBegan:Connect(function(Input)
    if Input.KeyCode == _G.DisableKey and not Typing then
        TracersEnabled = not TracersEnabled

        if _G.SendNotifications then
            StarterGui:SetCore("SendNotification", {
                Title = "Aetherial Hub";
                Text = "The tracer is now set to " .. tostring(TracersEnabled) .. ".";
                Duration = 5;
            })
        end
    elseif Input.KeyCode == _G.ModeSkipKey and not Typing then
        if _G.FromMouse then
            _G.FromMouse = false
            _G.FromCenter = true
            _G.FromBottom = false
            if _G.SendNotifications then
                StarterGui:SetCore("SendNotification", {
                    Title = "Aetherial Hub";
                    Text = "Tracers will be now coming from the center of your screen (Mode 2)";
                    Duration = 5;
                })
            end
        elseif _G.FromCenter then
            _G.FromCenter = false
            _G.FromBottom = true
            if _G.SendNotifications then
                StarterGui:SetCore("SendNotification", {
                    Title = "Aetherial Hub";
                    Text = "Tracers will be now coming from the bottom of your screen (Mode 1)";
                    Duration = 5;
                })
            end
        elseif _G.FromBottom then
            _G.FromBottom = false
            _G.FromMouse = true
            if _G.SendNotifications then
                StarterGui:SetCore("SendNotification", {
                    Title = "Aetherial Hub";
                    Text = "Tracers will be now coming from the position of your mouse cursor on your screen (Mode 3)";
                    Duration = 5;
                })
            end
        end
    end
end)

if _G.DefaultSettings then
    _G.TeamCheck = false
    _G.FromMouse = false
    _G.FromCenter = false
    _G.FromBottom = true
    _G.TracersVisible = true
    _G.TracerColor = Color3.fromRGB(40, 90, 255)
    _G.TracerThickness = 1
    _G.TracerTransparency = 0.5
    _G.ModeSkipKey = Enum.KeyCode.E
    _G.DisableKey = Enum.KeyCode.Q
end

local function CreateTracers()
    RunService.RenderStepped:Connect(function()
        if _G.TracersVisible and Find_Required == "Yes" then
            for _, v in pairs(Players:GetPlayers()) do
                if v ~= Players.LocalPlayer then
                    if _G.TeamCheck and v.Team == Players.LocalPlayer.Team then
                        -- Skip if team check is enabled and the player is on the same team
                        goto continue
                    end

                    if v.Character and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 then
                        local Vector, OnScreen = workspace.CurrentCamera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
                        if OnScreen then
                            if not ESPs[v] then
                                CreateESP(v.Character)
                                ESPs[v] = true
                            end

                            local MainTracer = Drawing.new("Line")
                            MainTracer.Visible = true
                            MainTracer.Color = _G.TracerColor
                            MainTracer.Thickness = _G.TracerThickness
                            MainTracer.Transparency = _G.TracerTransparency

                            if _G.FromMouse then
                                MainTracer.From = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
                            elseif _G.FromCenter then
                                MainTracer.From = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y / 2)
                            elseif _G.FromBottom then
                                MainTracer.From = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y)
                            end

                            MainTracer.To = Vector2.new(Vector.X, Vector.Y)
                        end
                    end
                end
                ::continue::
            end
        end
    end)
end

CreateTracers()
