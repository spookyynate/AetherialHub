-- Settings for ESP features
local Settings = {
    Box_Color = Color3.fromRGB(255, 0, 0),
    Tracer_Color = Color3.fromRGB(255, 0, 0),
    Tracer_Thickness = 1,
    Box_Thickness = 1,
    Tracer_Origin = "Bottom",
    Tracer_FollowMouse = false,
    Tracers = true,
    Boxes = true,
    Outlines = true,
    Outline_Color = Color3.fromRGB(255, 255, 255),
    Outline_Fill = false,
    Fill_Opacity = 1,
    Fill_Color = Color3.fromRGB(255, 255, 255),
    NameTags = true,
    Text_Font = Enum.Font.RobotoMono,
    Name_Color = Color3.fromRGB(255, 255, 255),
    Name_Positioning = false,
}

local Team_Check = {
    TeamCheck = false,
    Green = Color3.fromRGB(0, 255, 0),
    Red = Color3.fromRGB(255, 0, 0)
}
local TeamColor = true

local player = game:GetService("Players").LocalPlayer
local camera = game:GetService("Workspace").CurrentCamera
local mouse = player:GetMouse()

-- GUI Setup
local function setupGUI()
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Parent = player:WaitForChild("PlayerGui")

    local Frame = Instance.new("Frame")
    Frame.Size = UDim2.new(0, 200, 0, 400)
    Frame.Position = UDim2.new(0.7, 0, 0.5, -200)
    Frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    Frame.Parent = ScreenGui

    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(1, 0, 0.1, 0)
    Title.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    Title.Text = "ESP Settings"
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextScaled = true
    Title.Parent = Frame

    local TracerButton = Instance.new("TextButton")
    TracerButton.Size = UDim2.new(0.9, 0, 0.2, 0)
    TracerButton.Position = UDim2.new(0.05, 0, 0.2, 0)
    TracerButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    TracerButton.Text = "Tracers: ON"
    TracerButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    TracerButton.TextScaled = true
    TracerButton.Parent = Frame

    local BoxButton = Instance.new("TextButton")
    BoxButton.Size = UDim2.new(0.9, 0, 0.2, 0)
    BoxButton.Position = UDim2.new(0.05, 0, 0.45, 0)
    BoxButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    BoxButton.Text = "Boxes: ON"
    BoxButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    BoxButton.TextScaled = true
    BoxButton.Parent = Frame

    local OutlineButton = Instance.new("TextButton")
    OutlineButton.Size = UDim2.new(0.9, 0, 0.2, 0)
    OutlineButton.Position = UDim2.new(0.05, 0, 0.7, 0)
    OutlineButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    OutlineButton.Text = "Outlines: ON"
    OutlineButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    OutlineButton.TextScaled = true
    OutlineButton.Parent = Frame

    local NameTagButton = Instance.new("TextButton")
    NameTagButton.Size = UDim2.new(0.9, 0, 0.2, 0)
    NameTagButton.Position = UDim2.new(0.05, 0, 0.95, 0)
    NameTagButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    NameTagButton.Text = "Name Tags: ON"
    NameTagButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    NameTagButton.TextScaled = true
    NameTagButton.Parent = Frame

    TracerButton.MouseButton1Click:Connect(function()
        Settings.Tracers = not Settings.Tracers
        TracerButton.Text = Settings.Tracers and "Tracers: ON" or "Tracers: OFF"
    end)

    BoxButton.MouseButton1Click:Connect(function()
        Settings.Boxes = not Settings.Boxes
        BoxButton.Text = Settings.Boxes and "Boxes: ON" or "Boxes: OFF"
    end)

    OutlineButton.MouseButton1Click:Connect(function()
        Settings.Outlines = not Settings.Outlines
        OutlineButton.Text = Settings.Outlines and "Outlines: ON" or "Outlines: OFF"
    end)

    NameTagButton.MouseButton1Click:Connect(function()
        Settings.NameTags = not Settings.NameTags
        NameTagButton.Text = Settings.NameTags and "Name Tags: ON" or "Name Tags: OFF"
    end)
end

setupGUI()

-- Functions for ESP elements
local function NewQuad(thickness, color)
    local quad = Drawing.new("Quad")
    quad.Visible = false
    quad.PointA = Vector2.new(0,0)
    quad.PointB = Vector2.new(0,0)
    quad.PointC = Vector2.new(0,0)
    quad.PointD = Vector2.new(0,0)
    quad.Color = color
    quad.Filled = false
    quad.Thickness = thickness
    quad.Transparency = 1
    return quad
end

local function NewLine(thickness, color)
    local line = Drawing.new("Line")
    line.Visible = false
    line.From = Vector2.new(0, 0)
    line.To = Vector2.new(0, 0)
    line.Color = color 
    line.Thickness = thickness
    line.Transparency = 1
    return line
end

local function Visibility(state, lib)
    for _, x in pairs(lib) do
        x.Visible = state
    end
end

local black = Color3.fromRGB(0, 0 ,0)
local function ESP(plr)
    local library = {
        blacktracer = NewLine(Settings.Tracer_Thickness*2, black),
        tracer = NewLine(Settings.Tracer_Thickness, Settings.Tracer_Color),
        black = NewQuad(Settings.Box_Thickness*2, black),
        box = NewQuad(Settings.Box_Thickness, Settings.Box_Color),
    }

    local function Colorize(color)
        for _, x in pairs(library) do
            if x ~= library.blacktracer and x ~= library.black then
                x.Color = color
            end
        end
    end

    local function Updater()
        local connection
        connection = game:GetService("RunService").RenderStepped:Connect(function()
            if plr.Character ~= nil and plr.Character:FindFirstChild("Humanoid") ~= nil and plr.Character:FindFirstChild("HumanoidRootPart") ~= nil and plr.Character.Humanoid.Health > 0 and plr.Character:FindFirstChild("Head") ~= nil then
                local HumPos, OnScreen = camera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position)
                if OnScreen then
                    local head = camera:WorldToViewportPoint(plr.Character.Head.Position)
                    local DistanceY = math.clamp((Vector2.new(head.X, head.Y) - Vector2.new(HumPos.X, HumPos.Y)).magnitude, 2, math.huge)
                    
                    local function Size(item)
                        item.PointA = Vector2.new(HumPos.X + DistanceY, HumPos.Y - DistanceY*2)
                        item.PointB = Vector2.new(HumPos.X - DistanceY, HumPos.Y - DistanceY*2)
                        item.PointC = Vector2.new(HumPos.X - DistanceY, HumPos.Y + DistanceY*2)
                        item.PointD = Vector2.new(HumPos.X + DistanceY, HumPos.Y + DistanceY*2)
                    end
                    Size(library.box)
                    Size(library.black)

                    if Settings.Tracers then
                        if Settings.Tracer_Origin == "Middle" then
                            library.tracer.From = camera.ViewportSize*0.5
                            library.blacktracer.From = camera.ViewportSize*0.5
                        elseif Settings.Tracer_Origin == "Bottom" then
                            library.tracer.From = Vector2.new(camera.ViewportSize.X*0.5, camera.ViewportSize.Y) 
                            library.blacktracer.From = Vector2.new(camera.ViewportSize.X*0.5, camera.ViewportSize.Y)
                        end
                        if Settings.Tracer_FollowMouse then
                            library.tracer.From = Vector2.new(mouse.X, mouse.Y+36)
                            library.blacktracer.From = Vector2.new(mouse.X, mouse.Y+36)
                        end
                        library.tracer.To = Vector2.new(HumPos.X, HumPos.Y + DistanceY*2)
                        library.blacktracer.To = Vector2.new(HumPos.X, HumPos.Y + DistanceY*2)
                    else 
                        library.tracer.From = Vector2.new(0, 0)
                        library.blacktracer.From = Vector2.new(0, 0)
                        library.tracer.To = Vector2.new(0, 0)
                        library.blacktracer.To = Vector2.new(0, 0)
                    end

                    if Team_Check.TeamCheck then
                        if plr.TeamColor == player.TeamColor then
                            Colorize(Team_Check.Green)
                        else 
                            Colorize(Team_Check.Red)
                        end
                    else 
                        library.tracer.Color = Settings.Tracer_Color
                        library.box.Color = Settings.Box_Color
                    end

                    if Settings.Outlines then
                        if not library.outline then
                            library.outline = Instance.new("Highlight")
                            library.outline.OutlineColor = Settings.Outline_Color
                            library.outline.FillColor = Settings.Fill_Coloring
                            library.outline.FillTransparency = Settings.Fill_Opacity
                            library.outline.Adornee = plr.Character
                            library.outline.Parent = game:GetService("CoreGui")
                        end
                        Visibility(true, {library.outline})
                    else
                        if library.outline then
                            library.outline.Visible = false
                        end
                    end

                    Visibility(true, library)
                else 
                    Visibility(false, library)
                end
            else 
                Visibility(false, library)
                if game.Players:FindFirstChild(plr.Name) == nil then
                    connection:Disconnect()
                end
            end
        end)
        return connection
    end

    coroutine.wrap(Updater)()
end

-- Initializing ESP for existing and new players
for _, plr in pairs(game:GetService("Players"):GetPlayers()) do
    if plr ~= player and plr.Character and plr.Character:FindFirstChild("Humanoid") then
        ESP(plr)
    end
end

game:GetService("Players").PlayerAdded:Connect(function(plr)
    if plr ~= player then
        ESP(plr)
    end
end)
